/*
 * This file is generated by jOOQ.
 */
package com.example.training.jooq.tables;


import com.example.training.jooq.Keys;
import com.example.training.jooq.Public;
import com.example.training.jooq.tables.records.UserEntityRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserEntity extends TableImpl<UserEntityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_entity</code>
     */
    public static final UserEntity USER_ENTITY = new UserEntity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserEntityRecord> getRecordType() {
        return UserEntityRecord.class;
    }

    /**
     * The column <code>public.user_entity.id</code>.
     */
    public final TableField<UserEntityRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.user_entity.first_name</code>.
     */
    public final TableField<UserEntityRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.user_entity.last_name</code>.
     */
    public final TableField<UserEntityRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.user_entity.password</code>.
     */
    public final TableField<UserEntityRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.user_entity.role</code>.
     */
    public final TableField<UserEntityRecord, Integer> ROLE = createField(DSL.name("role"), SQLDataType.INTEGER, this, "");

    private UserEntity(Name alias, Table<UserEntityRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserEntity(Name alias, Table<UserEntityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_entity</code> table reference
     */
    public UserEntity(String alias) {
        this(DSL.name(alias), USER_ENTITY);
    }

    /**
     * Create an aliased <code>public.user_entity</code> table reference
     */
    public UserEntity(Name alias) {
        this(alias, USER_ENTITY);
    }

    /**
     * Create a <code>public.user_entity</code> table reference
     */
    public UserEntity() {
        this(DSL.name("user_entity"), null);
    }

    public <O extends Record> UserEntity(Table<O> child, ForeignKey<O, UserEntityRecord> key) {
        super(child, key, USER_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<UserEntityRecord, Integer> getIdentity() {
        return (Identity<UserEntityRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserEntityRecord> getPrimaryKey() {
        return Keys.USER_ENTITY_PKEY;
    }

    @Override
    public List<UniqueKey<UserEntityRecord>> getKeys() {
        return Arrays.<UniqueKey<UserEntityRecord>>asList(Keys.USER_ENTITY_PKEY);
    }

    @Override
    public List<ForeignKey<UserEntityRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserEntityRecord, ?>>asList(Keys.USER_ENTITY__FK_ROLE_ID);
    }

    private transient Role _role;

    public Role role() {
        if (_role == null)
            _role = new Role(this, Keys.USER_ENTITY__FK_ROLE_ID);

        return _role;
    }

    @Override
    public UserEntity as(String alias) {
        return new UserEntity(DSL.name(alias), this);
    }

    @Override
    public UserEntity as(Name alias) {
        return new UserEntity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserEntity rename(String name) {
        return new UserEntity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserEntity rename(Name name) {
        return new UserEntity(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
